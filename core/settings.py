"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
import logging.config

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ---------------------------------------------------------------------------- #
#                                   DEBUGGING                                  #
# ---------------------------------------------------------------------------- #

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "True") == "True"

# Logging
LOGGING_CONFIG = None  # Avoid Django logging setup
LOGGING = {
    "version": 1,
    # Set to True to disable Django's logging setup
    "disable_existing_loggers": True,
    # Define the formatters
    "formatters": {
        "default": {
            "format": "%(asctime)s - %(levelname)s - %(name)s - %(module)s - %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    # Define the handlers
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",  # Log to console
            "formatter": "default",  # Use the default formatter
        }
    },
    # Uncomment to log with the root logger
    # "root": {"level": "WARNING", "handlers": ["console"]},
    "loggers": {
        # Consistent logger for the application
        # Use `log = logging.getLogger("app_logger")` in your code
        "app_logger": {
            "level": os.getenv("LOGGING_LOG_LEVEL", "DEBUG"),
            "handlers": ["console"],
            "propagate": False,
        },
        # Django logger
        "django": {
            "level": "INFO",
            "handlers": ["console"],
            "propagate": False,
        },
        # Celery logger
        "celery": {
            "level": "INFO",
            "handlers": ["console"],
            "propagate": False,
        },
        # Celery beat logger
        "celery.beat": {
            "level": "WARNING",
            "handlers": ["console"],
            "propagate": False,
        },
    },
}
logging.config.dictConfig(LOGGING)

# ---------------------------------------------------------------------------- #
#                                  CONNECTIONS                                 #
# ---------------------------------------------------------------------------- #
# SECURITY WARNING: keep the secret key used in production secret!
if "DJANGO_SECRET_KEY" not in os.environ:
    raise ValueError("DJANGO_SECRET_KEY environment variable not set.")
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# Hosts
if "DJANGO_ALLOWED_HOSTS" not in os.environ:
    raise ValueError("DJANGO_ALLOWED_HOSTS environment variable not set.")
ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS").split(",")


# ---------------------------------------------------------------------------- #
#                                INSTALLED APPS                                #
# ---------------------------------------------------------------------------- #
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.messages",
    "django.contrib.sessions",
    "django.contrib.staticfiles",
    # ---------------------------------- CELERY ---------------------------------- #
    "django_celery_beat",  # Celery beat
    # -------------------------------- CUSTOM APPS ------------------------------- #
    "monitor",  # Monitor App
]

# ---------------------------------------------------------------------------- #
#                                  MIDDLEWARE                                  #
# ---------------------------------------------------------------------------- #
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Whitenoise
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# ---------------------------------------------------------------------------- #
#                              URLS AND TEMPLATES                              #
# ---------------------------------------------------------------------------- #
ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


# ---------------------------------------------------------------------------- #
#                                     WSGI                                     #
# ---------------------------------------------------------------------------- #
WSGI_APPLICATION = "core.wsgi.application"


# ---------------------------------------------------------------------------- #
#                                   DATABASE                                   #
# ---------------------------------------------------------------------------- #

# ---------------------------------- SQLITE ---------------------------------- #

# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ----------------------------------- REDIS ---------------------------------- #
REDIS_HOST = "redis"
REDIS_PORT = 6379
REDIS_DB = 0

# ---------------------------------------------------------------------------- #
#                             Internationalization                             #
# ---------------------------------------------------------------------------- #
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# ---------------------------------------------------------------------------- #
#                            STATIC AND MEDIA ROUTES                           #
# ---------------------------------------------------------------------------- #

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_ROOT = BASE_DIR / "staticfiles"
STATIC_URL = "static/"

MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "media/"


# ---------------------------------------------------------------------------- #
#                                AUTHENTICATION                                #
# ---------------------------------------------------------------------------- #


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# ---------------------------------------------------------------------------- #
#                                    CELERY                                    #
# ---------------------------------------------------------------------------- #
CELERY_BROKER_URL = os.getenv(
    "CELERY_BROKER_URL", f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"
)
CELERY_RESULT_BACKEND = os.getenv(
    "CELERY_RESULT_BACKEND", f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"
)
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_SERIALIZER = "json"

# Configure Beat Periodic Tasks in the database
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"


# ---------------------------------------------------------------------------- #
#                                   WALLAPOP                                   #
# ---------------------------------------------------------------------------- #
WALLAPOP_LATITUDE = os.getenv("WALLAPOP_LATITUDE", "40.416775")  # Default latitude
WALLAPOP_LONGITUDE = os.getenv("WALLAPOP_LONGITUDE", "-3.703790")  # Default longitude

# ---------------------------------------------------------------------------- #
#                                     NTFY                                     #
# ---------------------------------------------------------------------------- #
NTFY_URL = os.getenv("NTFY_URL", "https://ntfy.sh")
NTFY_TOPIC = os.getenv("NTFY_TOPIC", "wallapop")
NTFY_TOKEN = os.getenv("NTFY_TOKEN", None)
